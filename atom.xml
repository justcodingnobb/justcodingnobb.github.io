<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://justcodingnobb.github.io/</id>
    <title>Rekkles&apos;s Home</title>
    <updated>2020-01-02T04:32:15.831Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://justcodingnobb.github.io/"/>
    <link rel="self" href="https://justcodingnobb.github.io/atom.xml"/>
    <subtitle>Code Machine</subtitle>
    <logo>https://justcodingnobb.github.io/images/avatar.png</logo>
    <icon>https://justcodingnobb.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Rekkles&apos;s Home</rights>
    <entry>
        <title type="html"><![CDATA[JS循环中使用定时器的坑]]></title>
        <id>https://justcodingnobb.github.io/post/js-xun-huan-zhong-shi-yong-ding-shi-qi-de-keng</id>
        <link href="https://justcodingnobb.github.io/post/js-xun-huan-zhong-shi-yong-ding-shi-qi-de-keng">
        </link>
        <updated>2020-01-02T02:35:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="js循环中使用定时器的坑">JS循环中使用定时器的坑</h3>
<p>执行以下代码：</p>
<pre><code>for(let i=1; i&lt;=5;i++){
    console.log('ffff:'+i);
    setTimeout(()=&gt;{ console.log('ssss:'+i) },100);
}
</code></pre>
<p>结果：</p>
<pre><code>ffff:1
ffff:2
ffff:3
ffff:4
ffff:5
ssss:1
ssss:2
ssss:3
ssss:4
ssss:5
</code></pre>
<p>执行以下代码：</p>
<pre><code>for(var i=1; i&lt;=5;i++){
    console.log('ffff:'+i);
    setTimeout(()=&gt;{ console.log('ssss:'+i) },100);
}
</code></pre>
<p>结果：</p>
<pre><code>ffff:1
ffff:2
ffff:3
ffff:4
ffff:5
ssss:6
ssss:6
ssss:6
ssss:6
ssss:6
</code></pre>
<p>唯一的区别： for里面定义变量，一个用的let，一个用的var。<br>
let：函数作用域，在当前函数内可以使用。<br>
var：全局作用域，定义之后全局可用。</p>
<p>还涉及一个知识点：context！ 俗称上下文（虽然这么翻译很狗屎）</p>
<p><code>通俗点讲上下文，其实就是你当前执行环境的一个快照（也有是引用的情况）！</code></p>
<p>第一个例子：<br>
使用let定义的变量，那么let的作用域仅仅在for里面生效，执行输出之后，执行setTimeout（异步），JS异步相当于添加一个任务队列，当同步任务执行完毕之后就会去执行异步队列的任务（这也解释了为什么有时候使用JS定时器不会按照你规定的时间去完成），添加异步任务的时候，保存了上下文，上下文中的i第一次为1，之后递加，总共循环5次，添加5个异步队列。</p>
<p>第二个例子：<br>
使用var定义的变量，全局都有效，指向的是一个内存地址，无论哪里修改了，其他地方使用这个变量都会被修改（引用传递，内存地址只有一个），当第一次添加一个异步队列的时候，上下文指向的是同一个内存地址的i，随着循环的递加，i的地址不变，值每次都+1，那么当循环执行完毕，开始执行异步队列的时候，i的值取到的是 5++；for里面循环结束为最后一个表达式的值，这也就解释了为什么每次都是6.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何开发一个Chrome拓展。]]></title>
        <id>https://justcodingnobb.github.io/post/ru-he-kai-fa-yi-ge-chrome-tuo-zhan</id>
        <link href="https://justcodingnobb.github.io/post/ru-he-kai-fa-yi-ge-chrome-tuo-zhan">
        </link>
        <updated>2020-01-02T02:34:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="小记以后可能还会用到先记录一部分">小记，以后可能还会用到，先记录一部分。</h3>
<h3 id="翻译文档">翻译文档</h3>
<p><a href="http://open.chrome.360.cn/extension_dev/overview.html">360翻译文档</a></p>
<p>需要开发者资质，到 <a href="https://chrome.google.com/webstore/developer/dashboard?utm_source=chrome-ntp-icon">谷歌开发者平台</a> 5刀认证成为开发者!(visa卡~)</p>
<ol>
<li>建立一个manifest.json文件</li>
</ol>
<pre><code>{
   &quot;name&quot;: &quot;xxxx&quot;,
   &quot;manifest_version&quot;: 2,
   &quot;version&quot;: &quot;1.0.x&quot;,
   &quot;description&quot;: &quot;x&quot;,
   &quot;browser_action&quot;: {
     &quot;default_icon&quot; : &quot;images/01.png&quot;, //默认icon
     &quot;default_popup&quot;: &quot;popup.html&quot; //插件页面
   },
 
   &quot;content_scripts&quot;:[
     {
       &quot;matches&quot;: [&quot;*://*.acfun.cn/*&quot;,&quot;*://acfun.cn/*&quot;], //作用域名
       &quot;js&quot;: [&quot;js/jquery.js&quot;,&quot;js/back.js&quot;], //触发的JS
       &quot;run_at&quot;:&quot;document_end&quot;  //文档结束触发  还有其他配置
     }
   ]
 }
</code></pre>
<ol start="2">
<li>摸清作用域和权限 就可以开始开发了~</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二进制、源码、反码、补码，以及位运算]]></title>
        <id>https://justcodingnobb.github.io/post/er-jin-zhi-yuan-ma-fan-ma-bu-ma-yi-ji-wei-yun-suan</id>
        <link href="https://justcodingnobb.github.io/post/er-jin-zhi-yuan-ma-fan-ma-bu-ma-yi-ji-wei-yun-suan">
        </link>
        <updated>2020-01-02T02:31:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="二进制转为十进制">二进制转为十进制</h3>
<p>二进制1101.11</p>
<pre><code>1=1
10=2
100=4
1000=8
10000=16
0.1=2^-1=0.5  （负次方为正次方的倒数）
0.01=2^-2=0.25
1101.11=8+4+0+1+0.5+0.25=13.75
</code></pre>
<h3 id="源码-反码-补码">源码、反码、补码</h3>
<blockquote>
<p>一个有符号定点数的最高位为符号位，0是正，1是负</p>
</blockquote>
<p>例如,0000001 就是+1,1000001 就是-1<br>
<strong>正数的反码和补码都是和原码相同</strong><br>
<strong>负数的反码是将其原码除符号位之外的各位求反</strong></p>
<h4 id="源码">源码</h4>
<p>原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是8位二进制:</p>
<p>[+1]原 = 0000 0001</p>
<p>[-1]原 = 1000 0001</p>
<p>第一位是符号位. 因为第一位是符号位, 所以8位二进制数的取值范围就是:</p>
<p>[1111 1111 , 0111 1111]，即：</p>
<p>[-127 , 127]</p>
<p>原码是人脑最容易理解和计算的表示方式.</p>
<h4 id="反码">反码</h4>
<p>反码的表示方法是：正数的反码是其本身；负数的反码是在其原码的基础上, 符号位不变，其余各个位取反。</p>
<p>[+1] = [00000001]原 = [00000001]反</p>
<p>[-1] = [10000001]原 = [11111110]反</p>
<p>可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算。</p>
<h4 id="补码即在反码的基础上1">补码(即在反码的基础上+1)</h4>
<p>补码的表示方法是：正数的补码就是其本身；负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)</p>
<p>[+1] = [00000001]原 = [00000001]反 = [00000001]补</p>
<p>[-1] = [10000001]原 = [11111110]反 = [11111111]补</p>
<p>对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值.</p>
<h4 id="为什么有源码-补码-反码">为什么有源码、补码、反码</h4>
<p>计算十进制的表达式: 1-1=0</p>
<pre><code>1 - 1 = 1 + (-1) = 
[00000001]原 + [10000001]原 = 
[10000010]原 = -2
</code></pre>
<p>为了解决原码做减法的问题, 出现了反码。</p>
<p>1-1=0</p>
<pre><code>1 - 1 = 1 + (-1) 
= [0000 0001]原 + [1000 0001]原 
= [0000 0001]反 + [1111 1110]反 
= [1111 1111]反 = [1000 0000]原 
= -0
</code></pre>
<p>-0 没有意义，补码的出现就是解决编码问题</p>
<pre><code>1-1 = 1 + (-1) 
= [0000 0001]原 + [1000 0001]原 
= [0000 0001]补 + [1111 1111]补 
= [0000 0000]补
=[0000 0000]原
</code></pre>
<h3 id="位运算">位运算</h3>
<p>按位与：两个都是 1 就是 1<br>
9 &amp; 5</p>
<pre><code>1001 = 9
0101 = 5
0001 = 1
</code></pre>
<p>按位或: 有一个（允许2个）为 1 就是 1<br>
9 | 5</p>
<pre><code>1001 = 9
0101 = 5
1101 = 13 
</code></pre>
<p>按位抑或：不一样的就是 1<br>
9 ^ 5</p>
<pre><code>1001 = 9
0101 = 5
1100 = 12
</code></pre>
<p>按位同或：一样的就是 1(无论为1还是0)<br>
9 ^ 5</p>
<pre><code>1001 = 9
0101 = 5
0011 = 3
</code></pre>
<h3 id="左移运算">左移运算</h3>
<p>左移运算符m&lt;&lt;n表示吧m左移n位。左移n位的时候，最左边的n位将被丢弃，同时在最右边补上n个0.比如：</p>
<blockquote>
<p>00001010 &lt;&lt; 2 = 00101000</p>
</blockquote>
<blockquote>
<p>10001010 &lt;&lt; 3 = 01010000</p>
</blockquote>
<h3 id="右移运算">右移运算</h3>
<p>右移运算符m&gt;&gt;n表示把m右移n位。右移n位的时候，最右边的n位将被丢弃。但右移时处理最左边位的情形要稍微复杂一点。这里要特别注意，如果数字是一个无符号数值，则用0填补最左边的n位。如果数字是一个有符号数值，则用数字的符号位填补最左边的n位。也就是说如果数字原先是一个正数，则右移之后再最左边补n个0；如果数字原先是负数，则右移之后在最左边补n个1.下面是堆两个8位有符号数作右移的例子：</p>
<blockquote>
<p>00001010 &gt;&gt; 2 = 00000010</p>
</blockquote>
<blockquote>
<p>10001010 &gt;&gt; 3 = 11110001</p>
</blockquote>
<p>关于移位的运算有这样的等价关系：把整数右移一位和把整数除以2在数学上是等价的。</p>
<pre><code>a &lt;&lt; = 1 ; //a左移一位等效于a = a * 2;
a &lt;&lt; = 2 ; //a左移2位等效于a = a * 2的2次方（4）；
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS 安装 supervisor 以及设置 Laravel 队列设置 ]]></title>
        <id>https://justcodingnobb.github.io/post/use-supervisor</id>
        <link href="https://justcodingnobb.github.io/post/use-supervisor">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="centos-安装-supervisor-以及设置-laravel-队列设置">CentOS 安装 supervisor 以及设置 Laravel 队列设置</h2>
<h3 id="1-安装supervisor">1. 安装Supervisor</h3>
<p>先安装 Python 的 easy_install，再通过 easy_install 安装 supervisor</p>
<pre><code># yum install python-setuptools
# easy_install supervisor
</code></pre>
<h3 id="2-配置文件">2. 配置文件</h3>
<p>生成配置文件，并建立相应目录，管理 supervisor 启动进程</p>
<pre><code># echo_supervisord_conf &gt; /etc/supervisord.conf
# mkdir -p /etc/supervisor/conf.d/
</code></pre>
<p>编辑 <code>/etc/supervisord.conf</code>，修改最下面 [include] 区块内容：</p>
<pre><code>[include]
files = /etc/supervisor/conf.d/*.conf
</code></pre>
<p>这样， supervisor 会加载 /etc/supervisor/conf.d/ 下的所有 .conf 文件</p>
<h3 id="3自动启动">3.自动启动</h3>
<p>注意路径!</p>
<pre><code># wget -O /usr/lib/systemd/system/supervisord.service  https://github.com/Supervisor/initscripts/raw/master/centos-systemd-etcs
</code></pre>
<p>将 <code>supervisord</code> 服务设为自启动</p>
<pre><code># systemctl enable supervisord.service
</code></pre>
<p>输入 <code>supervisorctl</code> 命令可以进入 supervisor 控制台</p>
<h3 id="4设置-laravel-队列">4.设置 Laravel 队列</h3>
<p>新建 <code>/etc/supervisor/conf.d/xxxx.conf</code> 文件：</p>
<pre><code>[program:laravel-worker]
process_name=%(program_name)s_%(process_num)02d
command=/usr/local/php/bin/php /xxxx/artisan queue:work database --sleep=3 --tries=3 --daemon
autostart=true
autorestart=true
user=www (注意用户)
numprocs=8
redirect_stderr=true
stdout_logfile=/xxxx/storage/logs/queue.log
</code></pre>
<p>这里开启了 8 个 queue:work 进程，并监视他们，如果失败的话，自动重启；在项目的 storage/logs/queue.log 记录日志。<br>
启动 supervisor 服务：</p>
<p><code># supervisord</code></p>
<p>至此， supervisor 安装及 Laravel 队列设置完毕</p>
<p>如果以后配置文件有修改，或者新增，进入 supervisor 控制台，执行下面的命令</p>
<pre><code># supervisorctl
supervisorctl&gt; reread
supervisorctl&gt; update
supervisorctl&gt; start laravel-worker:*
</code></pre>
]]></content>
    </entry>
</feed>